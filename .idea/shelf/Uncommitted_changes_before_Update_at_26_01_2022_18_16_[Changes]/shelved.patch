Index: rogue'n'scroll dev kit/projectiles_n_movings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nfrom math import hypot\r\nfrom data_funcs import load_image, cut_sheet\r\nfrom settings_n_variables import FPS\r\nfrom buildings import Platform\r\n\r\n\r\nclass Projectile(pygame.sprite.Sprite):\r\n    def __init__(self, name, pos, trajectory, vector, dmg, collides, *group):\r\n        super().__init__(*group)\r\n        group[-1].change_layer(self, 2)\r\n        self.static = 'float'\r\n        self.dmg = dmg\r\n        self.trajectory = trajectory[0]\r\n        self.collides = list(collides)\r\n        self.change_x, self.change_y = vector\r\n        self.frames = cut_sheet(load_image(name + '_projectile'), 8)\r\n        self.cur_frame = 0\r\n        self.image = self.frames[self.cur_frame]\r\n        self.rect = self.image.get_rect()\r\n        self.rect.centerx, self.rect.centery = pos\r\n        # rot_image = pygame.transform.rotate(self.image, trajectory[1])\r\n        # rot_rect = self.rect.copy()\r\n        # rot_rect.center = rot_image.get_rect().center\r\n        # self.image = rot_image.subsurface(rot_rect).copy()\r\n        self.float_x, self.float_y = self.rect.x, self.rect.y\r\n        self.speed = 400 / FPS\r\n\r\n    def update(self, *args, **kwargs):\r\n        if self.trajectory == 'parabolic':\r\n            self.change_y += 9.8 / FPS\r\n        self.float_x += self.change_x * self.speed\r\n        self.float_y += self.change_y * self.speed\r\n        self.rect.x = round(self.float_x)\r\n        self.rect.y = round(self.float_y)\r\n\r\n    def collisions(self, ratio, group):\r\n        pl_collisions = pygame.sprite.spritecollideany(self, group,\r\n                                                       collided=pygame.sprite.collide_circle_ratio(ratio))\r\n        if pl_collisions and not isinstance(pl_collisions, Platform):\r\n            pl_collisions.take_damage(self.dmg)\r\n            self.detonate()\r\n\r\n    def detonate(self):\r\n        self.kill()\r\n\r\n\r\nclass Explosion(Projectile):\r\n    def __init__(self, pos, dmg, collides, *group):\r\n        super().__init__('explosion', pos, (0, 0), (0, 0), dmg, collides, *group)\r\n        group[-1].change_layer(self, 5)\r\n        self.rect.center = pos\r\n\r\n    def update(self):\r\n        self.cur_frame = (self.cur_frame + 16 / FPS)\r\n        self.image = self.frames[round(self.cur_frame) % len(self.frames)]\r\n        for group in self.collides:\r\n            self.collisions(round(self.cur_frame) % len(self.frames) / 8, group)\r\n        if self.cur_frame > 7:\r\n            self.detonate()\r\n\r\n    def collisions(self, ratio, group):\r\n        pl_collisions = pygame.sprite.spritecollideany(self, group,\r\n                                                       collided=pygame.sprite.collide_circle_ratio(ratio))\r\n        if pl_collisions and not isinstance(pl_collisions, Platform):\r\n            pl_collisions.take_damage(self.dmg)\r\n\r\n\r\nclass SunDrop(Projectile):\r\n    def __init__(self, pos, trajectory, vector, dmg, collides, *group):\r\n        super().__init__('drop', pos, (trajectory, 0), vector, dmg, collides, *group)\r\n\r\n    def update(self, *args, **kwargs):\r\n        super().update()\r\n        self.cur_frame = (self.cur_frame + 8 / FPS)\r\n        self.image = self.frames[round(self.cur_frame) % len(self.frames)]\r\n        for group in self.collides:\r\n            self.collisions(.625, group)\r\n\r\n    def detonate(self):\r\n        self.kill()\r\n\r\n\r\nclass Plasma(Projectile):\r\n    def __init__(self, pos, trajectory, vector, dmg, collides, *group):\r\n        super().__init__('plasma', pos, (trajectory, 0), vector, dmg, collides, *group)\r\n        self.speed = 120 / FPS\r\n        self.timer = 0.35 * FPS\r\n\r\n    def update(self, *args, **kwargs):\r\n        super().update()\r\n        self.cur_frame = (self.cur_frame + 12 / FPS)\r\n        self.image = self.frames[round(self.cur_frame) % len(self.frames)]\r\n        if self.timer == 0.35 * FPS:\r\n            collisions = pygame.sprite.spritecollideany(self, self.collides[0],\r\n                                                        collided=pygame.sprite.collide_circle_ratio(1.65))\r\n            if collisions:\r\n                self.timer -= 1\r\n        elif 0 < self.timer < 0.35 * FPS:\r\n            self.timer -= 1\r\n        else:\r\n            self.detonate()\r\n        for group in self.collides:\r\n            self.collisions(.4375, group)\r\n\r\n    def detonate(self):\r\n        Explosion(self.rect.center, self.dmg, self.collides, *self.groups())\r\n        self.kill()\r\n\r\n\r\nclass Defence(Projectile):\r\n    def __init__(self, pos, dmg, collides, *group):\r\n        super().__init__('defence', pos, (0, 0), (0, 0), dmg, collides, *group)\r\n        self.rect.center = pos\r\n\r\n    def collisions(self, ratio, group):\r\n        pl_collisions = pygame.sprite.spritecollide(self, group, False,\r\n                                                    collided=pygame.sprite.collide_circle_ratio(ratio))\r\n        for col in pl_collisions:\r\n            col.defend(self.dmg)\r\n\r\n    def update(self):\r\n        self.cur_frame = (self.cur_frame + 3 / FPS)\r\n        self.image = self.frames[round(self.cur_frame) % len(self.frames)]\r\n        for group in self.collides:\r\n            self.collisions(1, group)\r\n\r\n\r\nclass Orb(pygame.sprite.Sprite):\r\n    def __init__(self, value, pos, target, *group):\r\n        self.static = 'float'\r\n        super().__init__(*group)\r\n        group[-1].change_layer(self, 5)\r\n        self.value = value\r\n        self.color = (min(155 + value[0] * 5, 255), min(155 + value[1] * 3, 255), min(155 + value[2], 255))\r\n        self.image = pygame.surface.Surface((10, 10), pygame.SRCALPHA, 32)\r\n        pygame.draw.circle(self.image, self.color, (5, 5), 4, 0)\r\n        pygame.draw.circle(self.image, (100, 100, 100), (5, 5), 4, 1)\r\n        self.target = target\r\n        self.rect = self.image.get_rect()\r\n        self.rect.center = pos\r\n        a = target.rect.centerx - pos[0]\r\n        b = target.rect.centery - pos[1]\r\n        self.change_x, self.change_y = a/hypot(a, b), b/hypot(a, b)\r\n        self.float_x, self.float_y = self.rect.x, self.rect.y\r\n        self.speed = 40 / FPS\r\n\r\n    def update(self, *args, **kwargs):\r\n        self.float_x += self.change_x * self.speed\r\n        self.float_y += self.change_y * self.speed\r\n        self.rect.x = round(self.float_x)\r\n        self.rect.y = round(self.float_y)\r\n        a = self.target.rect.centerx - self.rect.centerx\r\n        b = self.target.rect.centery - self.rect.centery\r\n        self.change_x, self.change_y = a/hypot(a, b), b/hypot(a, b)\r\n        self.speed += 0.6 / FPS\r\n        self.collisions()\r\n\r\n    def collisions(self):\r\n        if self.target.rect.collidepoint(self.rect.center):\r\n            self.target.add_values(self.value)\r\n            self.detonate()\r\n\r\n    def detonate(self):\r\n        self.kill()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/rogue'n'scroll dev kit/projectiles_n_movings.py b/rogue'n'scroll dev kit/projectiles_n_movings.py
--- a/rogue'n'scroll dev kit/projectiles_n_movings.py	(revision 60b0ab9f252332db7a067be886ac8b36fd77782d)
+++ b/rogue'n'scroll dev kit/projectiles_n_movings.py	(date 1643210119215)
@@ -123,7 +123,7 @@
         self.cur_frame = (self.cur_frame + 3 / FPS)
         self.image = self.frames[round(self.cur_frame) % len(self.frames)]
         for group in self.collides:
-            self.collisions(1, group)
+            self.collisions(1.0, group)
 
 
 class Orb(pygame.sprite.Sprite):
